Object.defineProperty(exports, '__esModule', {
  value: true
});
/** @babel */

var ua = require('universal-analytics');
var trackingId = 'UA-47544457-3';

var user = null;

function getUser() {
  var userId = atom.config.get("git-plus.general._analyticsUserId");
  if (!atom.config.get("git-plus.general._analyticsUserId")) {
    userId = require("uuid").v4();
    atom.config.set("git-plus.general._analyticsUserId", userId);
  }
  if (user === null) {
    user = ua(trackingId, userId, {
      headers: {
        "User-Agent": navigator.userAgent
      }
    });
  }
  return user;
}

function trackConfigIsOn(name, value) {
  getUser().event('Config', 'ACTIVE', name, value, { anonymizeIp: true }).send();
}

function trackConfigChanged(name, _ref) {
  var oldValue = _ref.oldValue;
  var newValue = _ref.newValue;

  getUser().event('Config', 'CHANGED', name, newValue, { anonymizeIp: true }).send();
}

exports['default'] = function () {
  Object.keys(atom.config.getAll('git-plus')[0].value).forEach(function (name) {
    atom.config.observe('git-plus.' + name, function (value) {
      if (value !== undefined || value !== null || value !== '') {
        trackConfigIsOn(name, value);
      }
    });
    atom.config.onDidChange('git-plus.' + name, function (event) {
      return trackConfigChanged(name, event);
    });
  });
};

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2pvY2VseW4vLmF0b20vcGFja2FnZXMvZ2l0LXBsdXMvbGliL2FuYWx5dGljcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLElBQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0FBQ3pDLElBQU0sVUFBVSxHQUFHLGVBQWUsQ0FBQTs7QUFFbEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFBOztBQUVmLFNBQVMsT0FBTyxHQUFHO0FBQ2pCLE1BQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxDQUFDLENBQUE7QUFDakUsTUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxDQUFDLEVBQUU7QUFDekQsVUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQTtBQUM3QixRQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsRUFBRSxNQUFNLENBQUMsQ0FBQTtHQUM3RDtBQUNELE1BQUksSUFBSSxLQUFLLElBQUksRUFBRTtBQUNqQixRQUFJLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUU7QUFDNUIsYUFBTyxFQUFFO0FBQ1Asb0JBQVksRUFBRSxTQUFTLENBQUMsU0FBUztPQUNsQztLQUNGLENBQUMsQ0FBQTtHQUNIO0FBQ0QsU0FBTyxJQUFJLENBQUE7Q0FDWjs7QUFFRCxTQUFTLGVBQWUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO0FBQ3BDLFNBQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBQyxXQUFXLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtDQUM3RTs7QUFFRCxTQUFTLGtCQUFrQixDQUFDLElBQUksRUFBRSxJQUFvQixFQUFFO01BQXJCLFFBQVEsR0FBVCxJQUFvQixDQUFuQixRQUFRO01BQUUsUUFBUSxHQUFuQixJQUFvQixDQUFULFFBQVE7O0FBQ25ELFNBQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBQyxXQUFXLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtDQUNqRjs7cUJBRWMsWUFBVztBQUN4QixRQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUksRUFBSTtBQUNuRSxRQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sZUFBYSxJQUFJLEVBQUksVUFBQSxLQUFLLEVBQUk7QUFBRSxVQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFO0FBQUMsdUJBQWUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7T0FBQztLQUFFLENBQUMsQ0FBQTtBQUMvSSxRQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsZUFBYSxJQUFJLEVBQUksVUFBQSxLQUFLO2FBQUksa0JBQWtCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztLQUFBLENBQUMsQ0FBQTtHQUN0RixDQUFDLENBQUE7Q0FDSCIsImZpbGUiOiIvaG9tZS9qb2NlbHluLy5hdG9tL3BhY2thZ2VzL2dpdC1wbHVzL2xpYi9hbmFseXRpY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGJhYmVsICovXG5cbmNvbnN0IHVhID0gcmVxdWlyZSgndW5pdmVyc2FsLWFuYWx5dGljcycpXG5jb25zdCB0cmFja2luZ0lkID0gJ1VBLTQ3NTQ0NDU3LTMnXG5cbmxldCB1c2VyID0gbnVsbFxuXG5mdW5jdGlvbiBnZXRVc2VyKCkge1xuICBsZXQgdXNlcklkID0gYXRvbS5jb25maWcuZ2V0KFwiZ2l0LXBsdXMuZ2VuZXJhbC5fYW5hbHl0aWNzVXNlcklkXCIpXG4gIGlmICghYXRvbS5jb25maWcuZ2V0KFwiZ2l0LXBsdXMuZ2VuZXJhbC5fYW5hbHl0aWNzVXNlcklkXCIpKSB7XG4gICAgdXNlcklkID0gcmVxdWlyZShcInV1aWRcIikudjQoKVxuICAgIGF0b20uY29uZmlnLnNldChcImdpdC1wbHVzLmdlbmVyYWwuX2FuYWx5dGljc1VzZXJJZFwiLCB1c2VySWQpXG4gIH1cbiAgaWYgKHVzZXIgPT09IG51bGwpIHtcbiAgICB1c2VyID0gdWEodHJhY2tpbmdJZCwgdXNlcklkLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiVXNlci1BZ2VudFwiOiBuYXZpZ2F0b3IudXNlckFnZW50XG4gICAgICB9XG4gICAgfSlcbiAgfVxuICByZXR1cm4gdXNlclxufVxuXG5mdW5jdGlvbiB0cmFja0NvbmZpZ0lzT24obmFtZSwgdmFsdWUpIHtcbiAgZ2V0VXNlcigpLmV2ZW50KCdDb25maWcnLCAnQUNUSVZFJywgbmFtZSwgdmFsdWUsIHthbm9ueW1pemVJcDogdHJ1ZX0pLnNlbmQoKVxufVxuXG5mdW5jdGlvbiB0cmFja0NvbmZpZ0NoYW5nZWQobmFtZSwge29sZFZhbHVlLCBuZXdWYWx1ZX0pIHtcbiAgZ2V0VXNlcigpLmV2ZW50KCdDb25maWcnLCAnQ0hBTkdFRCcsIG5hbWUsIG5ld1ZhbHVlLCB7YW5vbnltaXplSXA6IHRydWV9KS5zZW5kKClcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIE9iamVjdC5rZXlzKGF0b20uY29uZmlnLmdldEFsbCgnZ2l0LXBsdXMnKVswXS52YWx1ZSkuZm9yRWFjaChuYW1lID0+IHtcbiAgICBhdG9tLmNvbmZpZy5vYnNlcnZlKGBnaXQtcGx1cy4ke25hbWV9YCwgdmFsdWUgPT4geyBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCB8fCB2YWx1ZSAhPT0gbnVsbCB8fCB2YWx1ZSAhPT0gJycpIHt0cmFja0NvbmZpZ0lzT24obmFtZSwgdmFsdWUpfSB9KVxuICAgIGF0b20uY29uZmlnLm9uRGlkQ2hhbmdlKGBnaXQtcGx1cy4ke25hbWV9YCwgZXZlbnQgPT4gdHJhY2tDb25maWdDaGFuZ2VkKG5hbWUsIGV2ZW50KSlcbiAgfSlcbn1cbiJdfQ==