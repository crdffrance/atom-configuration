(function() {
  var checkHex, getOption, hexToRgb, rgbToHex, setAccent, setFontsize, setSyntax, toConsole;

  module.exports = rgbToHex = function(r, g, b) {
    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
  };

  hexToRgb = function(hex) {
    var result;
    result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    if (result) {
      return {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      };
    } else {
      return null;
    }
  };

  checkHex = function(hex) {
    var reg, str;
    reg = /^#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})$/;
    str = hex;
    if (str.match(reg)) {
      return true;
    }
  };

  setAccent = function(accent) {
    var fs, path, writePath;
    fs = require('fs');
    path = require('path');
    writePath = path.join(__dirname, '..', 'styles/ui-accent.less');
    return fs.writeFileSync(writePath, "@accent-color: " + (rgbToHex(accent.red, accent.green, accent.blue)) + ";\n");
  };

  setFontsize = function(size) {
    var fs, path, writePath;
    fs = require('fs');
    path = require('path');
    writePath = path.join(__dirname, '..', 'styles/ui-fontsize.less');
    return fs.writeFileSync(writePath, "@font-size: " + size + "px;\n");
  };

  setSyntax = function(trigger) {
    var content, fs, path, writePath;
    fs = require('fs');
    path = require('path');
    writePath = path.join(__dirname, '..', 'styles/ui-syntax-include.less');
    content = trigger ? '@import "ui-syntax";\n' : '\n';
    return fs.writeFileSync(writePath, content);
  };

  getOption = function(option) {
    switch (option) {
      case 'accentColor':
        return atom.config.get('accents-ui.accentColor');
      case 'hexColor':
        return atom.config.get('accents-ui.hexColor');
      case 'fontSize':
        return atom.config.get('accents-ui.fontSize');
      case 'useSyntax':
        return atom.config.get('accents-ui.useSyntax');
      case 'debugMode':
        return atom.config.get('accents-ui.debugMode');
    }
  };

  toConsole = function(key, val, returnVal) {
    if (getOption('debugMode')) {
      console.log('accents-ui :: ' + key + ' : ' + val);
    }
    if (returnVal) {
      return val;
    }
  };

  setAccent(getOption('accentColor'));

  setFontsize(getOption('fontSize'));

  setSyntax(getOption('useSyntax'));

  atom.config.onDidChange('accents-ui.accentColor', function() {
    var color;
    color = getOption('accentColor');
    setAccent(toConsole('accent colour object', color, true));
    toConsole('accent colour Hex', color.toHexString(), false);
    if (getOption('debugMode')) {
      console.log(color);
    }
    return atom.config.set('accents-ui.hexColor', rgbToHex(color.red, color.green, color.blue));
  });

  atom.config.onDidChange('accents-ui.hexColor', function() {
    var color, hex, isHex, rgb;
    hex = getOption('hexColor');
    isHex = checkHex(hex);
    rgb = hexToRgb(hex);
    color = getOption('accentColor');
    if (isHex) {
      color.red = rgb.r;
      color.green = rgb.g;
      color.blue = rgb.b;
      return atom.config.set('accents-ui.accentColor', color);
    }
  });

  atom.config.onDidChange('accents-ui.fontSize', function() {
    return setSyntax(toConsole('font size', getOption('fontSize'), true));
  });

  atom.config.onDidChange('accents-ui.useSyntax', function() {
    return setSyntax(toConsole('override syntax', getOption('useSyntax'), true));
  });

  atom.config.onDidChange('accents-ui.debugMode', function() {
    return toConsole('debug mode', getOption('debugMode'), false);
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
